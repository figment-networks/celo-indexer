// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/celo-indexer/client/figmentclient (interfaces: Client)

// Package mock_figmentclient is a generated GoMock package.
package mock_figmentclient

import (
	context "context"
	client "github.com/figment-networks/celo-indexer/client"
	figmentclient "github.com/figment-networks/celo-indexer/client/figmentclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetAccountByAddressAndHeight mocks base method
func (m *MockClient) GetAccountByAddressAndHeight(arg0 context.Context, arg1 string, arg2 int64) (*figmentclient.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByAddressAndHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*figmentclient.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByAddressAndHeight indicates an expected call of GetAccountByAddressAndHeight
func (mr *MockClientMockRecorder) GetAccountByAddressAndHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByAddressAndHeight", reflect.TypeOf((*MockClient)(nil).GetAccountByAddressAndHeight), arg0, arg1, arg2)
}

// GetBlockByHeight mocks base method
func (m *MockClient) GetBlockByHeight(arg0 context.Context, arg1 int64) (*figmentclient.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", arg0, arg1)
	ret0, _ := ret[0].(*figmentclient.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight
func (mr *MockClientMockRecorder) GetBlockByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockClient)(nil).GetBlockByHeight), arg0, arg1)
}

// GetChainParams mocks base method
func (m *MockClient) GetChainParams(arg0 context.Context) (*figmentclient.ChainParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainParams", arg0)
	ret0, _ := ret[0].(*figmentclient.ChainParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainParams indicates an expected call of GetChainParams
func (mr *MockClientMockRecorder) GetChainParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainParams", reflect.TypeOf((*MockClient)(nil).GetChainParams), arg0)
}

// GetChainStatus mocks base method
func (m *MockClient) GetChainStatus(arg0 context.Context) (*figmentclient.ChainStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainStatus", arg0)
	ret0, _ := ret[0].(*figmentclient.ChainStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainStatus indicates an expected call of GetChainStatus
func (mr *MockClientMockRecorder) GetChainStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainStatus", reflect.TypeOf((*MockClient)(nil).GetChainStatus), arg0)
}

// GetIdentityByHeight mocks base method
func (m *MockClient) GetIdentityByHeight(arg0 context.Context, arg1 string, arg2 int64) (*figmentclient.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityByHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*figmentclient.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityByHeight indicates an expected call of GetIdentityByHeight
func (mr *MockClientMockRecorder) GetIdentityByHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityByHeight", reflect.TypeOf((*MockClient)(nil).GetIdentityByHeight), arg0, arg1, arg2)
}

// GetMetaByHeight mocks base method
func (m *MockClient) GetMetaByHeight(arg0 context.Context, arg1 int64) (*figmentclient.HeightMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaByHeight", arg0, arg1)
	ret0, _ := ret[0].(*figmentclient.HeightMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaByHeight indicates an expected call of GetMetaByHeight
func (mr *MockClientMockRecorder) GetMetaByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaByHeight", reflect.TypeOf((*MockClient)(nil).GetMetaByHeight), arg0, arg1)
}

// GetName mocks base method
func (m *MockClient) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockClientMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockClient)(nil).GetName))
}

// GetRequestCounter mocks base method
func (m *MockClient) GetRequestCounter() client.RequestCounter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestCounter")
	ret0, _ := ret[0].(client.RequestCounter)
	return ret0
}

// GetRequestCounter indicates an expected call of GetRequestCounter
func (mr *MockClientMockRecorder) GetRequestCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestCounter", reflect.TypeOf((*MockClient)(nil).GetRequestCounter))
}

// GetTransactionsByHeight mocks base method
func (m *MockClient) GetTransactionsByHeight(arg0 context.Context, arg1 int64) ([]*figmentclient.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByHeight", arg0, arg1)
	ret0, _ := ret[0].([]*figmentclient.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByHeight indicates an expected call of GetTransactionsByHeight
func (mr *MockClientMockRecorder) GetTransactionsByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByHeight", reflect.TypeOf((*MockClient)(nil).GetTransactionsByHeight), arg0, arg1)
}

// GetValidatorGroupsByHeight mocks base method
func (m *MockClient) GetValidatorGroupsByHeight(arg0 context.Context, arg1 int64) ([]*figmentclient.ValidatorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorGroupsByHeight", arg0, arg1)
	ret0, _ := ret[0].([]*figmentclient.ValidatorGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorGroupsByHeight indicates an expected call of GetValidatorGroupsByHeight
func (mr *MockClientMockRecorder) GetValidatorGroupsByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorGroupsByHeight", reflect.TypeOf((*MockClient)(nil).GetValidatorGroupsByHeight), arg0, arg1)
}

// GetValidatorsByHeight mocks base method
func (m *MockClient) GetValidatorsByHeight(arg0 context.Context, arg1 int64) ([]*figmentclient.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByHeight", arg0, arg1)
	ret0, _ := ret[0].([]*figmentclient.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByHeight indicates an expected call of GetValidatorsByHeight
func (mr *MockClientMockRecorder) GetValidatorsByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByHeight", reflect.TypeOf((*MockClient)(nil).GetValidatorsByHeight), arg0, arg1)
}
