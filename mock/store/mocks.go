// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/celo-indexer/store (interfaces: AccountActivitySeq,BlockSeq,BlockSummary,Database,Reports,Syncables,SystemEvents,ValidatorAgg,ValidatorSeq,ValidatorSummary,ValidatorGroupAgg,ValidatorGroupSeq,ValidatorGroupSummary)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	model "github.com/figment-networks/celo-indexer/model"
	store "github.com/figment-networks/celo-indexer/store"
	types "github.com/figment-networks/celo-indexer/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAccountActivitySeq is a mock of AccountActivitySeq interface
type MockAccountActivitySeq struct {
	ctrl     *gomock.Controller
	recorder *MockAccountActivitySeqMockRecorder
}

// MockAccountActivitySeqMockRecorder is the mock recorder for MockAccountActivitySeq
type MockAccountActivitySeqMockRecorder struct {
	mock *MockAccountActivitySeq
}

// NewMockAccountActivitySeq creates a new mock instance
func NewMockAccountActivitySeq(ctrl *gomock.Controller) *MockAccountActivitySeq {
	mock := &MockAccountActivitySeq{ctrl: ctrl}
	mock.recorder = &MockAccountActivitySeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountActivitySeq) EXPECT() *MockAccountActivitySeqMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockAccountActivitySeq) BulkUpsert(arg0 []model.AccountActivitySeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockAccountActivitySeqMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockAccountActivitySeq)(nil).BulkUpsert), arg0)
}

// DeleteForHeight mocks base method
func (m *MockAccountActivitySeq) DeleteForHeight(arg0 int64) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForHeight", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForHeight indicates an expected call of DeleteForHeight
func (mr *MockAccountActivitySeqMockRecorder) DeleteForHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForHeight", reflect.TypeOf((*MockAccountActivitySeq)(nil).DeleteForHeight), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockAccountActivitySeq) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockAccountActivitySeqMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockAccountActivitySeq)(nil).DeleteOlderThan), arg0)
}

// FindByHeight mocks base method
func (m *MockAccountActivitySeq) FindByHeight(arg0 int64) ([]model.AccountActivitySeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.AccountActivitySeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockAccountActivitySeqMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockAccountActivitySeq)(nil).FindByHeight), arg0)
}

// FindByHeightAndAddress mocks base method
func (m *MockAccountActivitySeq) FindByHeightAndAddress(arg0 int64, arg1 string) ([]model.AccountActivitySeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.AccountActivitySeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndAddress indicates an expected call of FindByHeightAndAddress
func (mr *MockAccountActivitySeqMockRecorder) FindByHeightAndAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndAddress", reflect.TypeOf((*MockAccountActivitySeq)(nil).FindByHeightAndAddress), arg0, arg1)
}

// FindLastByAddress mocks base method
func (m *MockAccountActivitySeq) FindLastByAddress(arg0 string, arg1 int64) ([]model.AccountActivitySeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.AccountActivitySeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByAddress indicates an expected call of FindLastByAddress
func (mr *MockAccountActivitySeqMockRecorder) FindLastByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddress", reflect.TypeOf((*MockAccountActivitySeq)(nil).FindLastByAddress), arg0, arg1)
}

// FindLastByAddressAndKind mocks base method
func (m *MockAccountActivitySeq) FindLastByAddressAndKind(arg0, arg1 string, arg2 int64) ([]model.AccountActivitySeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddressAndKind", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.AccountActivitySeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByAddressAndKind indicates an expected call of FindLastByAddressAndKind
func (mr *MockAccountActivitySeqMockRecorder) FindLastByAddressAndKind(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddressAndKind", reflect.TypeOf((*MockAccountActivitySeq)(nil).FindLastByAddressAndKind), arg0, arg1, arg2)
}

// FindMostRecent mocks base method
func (m *MockAccountActivitySeq) FindMostRecent() (*model.AccountActivitySeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.AccountActivitySeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockAccountActivitySeqMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockAccountActivitySeq)(nil).FindMostRecent))
}

// MockBlockSeq is a mock of BlockSeq interface
type MockBlockSeq struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSeqMockRecorder
}

// MockBlockSeqMockRecorder is the mock recorder for MockBlockSeq
type MockBlockSeqMockRecorder struct {
	mock *MockBlockSeq
}

// NewMockBlockSeq creates a new mock instance
func NewMockBlockSeq(ctrl *gomock.Controller) *MockBlockSeq {
	mock := &MockBlockSeq{ctrl: ctrl}
	mock.recorder = &MockBlockSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSeq) EXPECT() *MockBlockSeqMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBlockSeq) Create(arg0 *model.BlockSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBlockSeqMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlockSeq)(nil).Create), arg0)
}

// CreateIfNotExists mocks base method
func (m *MockBlockSeq) CreateIfNotExists(arg0 *model.BlockSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists
func (mr *MockBlockSeqMockRecorder) CreateIfNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockBlockSeq)(nil).CreateIfNotExists), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockBlockSeq) DeleteOlderThan(arg0 time.Time, arg1 []store.ActivityPeriodRow) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockBlockSeqMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockBlockSeq)(nil).DeleteOlderThan), arg0, arg1)
}

// FindBy mocks base method
func (m *MockBlockSeq) FindBy(arg0 string, arg1 interface{}) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockBlockSeqMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockBlockSeq)(nil).FindBy), arg0, arg1)
}

// FindByHeight mocks base method
func (m *MockBlockSeq) FindByHeight(arg0 int64) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockBlockSeqMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockBlockSeq)(nil).FindByHeight), arg0)
}

// FindByID mocks base method
func (m *MockBlockSeq) FindByID(arg0 int64) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockBlockSeqMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBlockSeq)(nil).FindByID), arg0)
}

// FindMostRecent mocks base method
func (m *MockBlockSeq) FindMostRecent() (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockBlockSeqMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockBlockSeq)(nil).FindMostRecent))
}

// GetAvgRecentTimes mocks base method
func (m *MockBlockSeq) GetAvgRecentTimes(arg0 int64) store.GetAvgRecentTimesResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvgRecentTimes", arg0)
	ret0, _ := ret[0].(store.GetAvgRecentTimesResult)
	return ret0
}

// GetAvgRecentTimes indicates an expected call of GetAvgRecentTimes
func (mr *MockBlockSeqMockRecorder) GetAvgRecentTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvgRecentTimes", reflect.TypeOf((*MockBlockSeq)(nil).GetAvgRecentTimes), arg0)
}

// Save mocks base method
func (m *MockBlockSeq) Save(arg0 *model.BlockSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBlockSeqMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockSeq)(nil).Save), arg0)
}

// Summarize mocks base method
func (m *MockBlockSeq) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]store.BlockSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]store.BlockSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockBlockSeqMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockBlockSeq)(nil).Summarize), arg0, arg1)
}

// MockBlockSummary is a mock of BlockSummary interface
type MockBlockSummary struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSummaryMockRecorder
}

// MockBlockSummaryMockRecorder is the mock recorder for MockBlockSummary
type MockBlockSummaryMockRecorder struct {
	mock *MockBlockSummary
}

// NewMockBlockSummary creates a new mock instance
func NewMockBlockSummary(ctrl *gomock.Controller) *MockBlockSummary {
	mock := &MockBlockSummary{ctrl: ctrl}
	mock.recorder = &MockBlockSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSummary) EXPECT() *MockBlockSummaryMockRecorder {
	return m.recorder
}

// DeleteOlderThan mocks base method
func (m *MockBlockSummary) DeleteOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockBlockSummaryMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockBlockSummary)(nil).DeleteOlderThan), arg0, arg1)
}

// Find mocks base method
func (m *MockBlockSummary) Find(arg0 *model.BlockSummary) (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockBlockSummaryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBlockSummary)(nil).Find), arg0)
}

// FindActivityPeriods mocks base method
func (m *MockBlockSummary) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockBlockSummaryMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockBlockSummary)(nil).FindActivityPeriods), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockBlockSummary) FindMostRecent() (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockBlockSummaryMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockBlockSummary)(nil).FindMostRecent))
}

// FindMostRecentByInterval mocks base method
func (m *MockBlockSummary) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockBlockSummaryMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockBlockSummary)(nil).FindMostRecentByInterval), arg0)
}

// FindSummary mocks base method
func (m *MockBlockSummary) FindSummary(arg0 types.SummaryInterval, arg1 string) ([]model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0, arg1)
	ret0, _ := ret[0].([]model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockBlockSummaryMockRecorder) FindSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockBlockSummary)(nil).FindSummary), arg0, arg1)
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetTotalSize mocks base method
func (m *MockDatabase) GetTotalSize() (*store.GetTotalSizeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSize")
	ret0, _ := ret[0].(*store.GetTotalSizeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSize indicates an expected call of GetTotalSize
func (mr *MockDatabaseMockRecorder) GetTotalSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSize", reflect.TypeOf((*MockDatabase)(nil).GetTotalSize))
}

// MockReports is a mock of Reports interface
type MockReports struct {
	ctrl     *gomock.Controller
	recorder *MockReportsMockRecorder
}

// MockReportsMockRecorder is the mock recorder for MockReports
type MockReportsMockRecorder struct {
	mock *MockReports
}

// NewMockReports creates a new mock instance
func NewMockReports(ctrl *gomock.Controller) *MockReports {
	mock := &MockReports{ctrl: ctrl}
	mock.recorder = &MockReportsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReports) EXPECT() *MockReportsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReports) Create(arg0 *model.Report) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReports)(nil).Create), arg0)
}

// DeleteByKinds mocks base method
func (m *MockReports) DeleteByKinds(arg0 []model.ReportKind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKinds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKinds indicates an expected call of DeleteByKinds
func (mr *MockReportsMockRecorder) DeleteByKinds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKinds", reflect.TypeOf((*MockReports)(nil).DeleteByKinds), arg0)
}

// FindNotCompletedByIndexVersion mocks base method
func (m *MockReports) FindNotCompletedByIndexVersion(arg0 int64, arg1 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByIndexVersion", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByIndexVersion indicates an expected call of FindNotCompletedByIndexVersion
func (mr *MockReportsMockRecorder) FindNotCompletedByIndexVersion(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByIndexVersion", reflect.TypeOf((*MockReports)(nil).FindNotCompletedByIndexVersion), varargs...)
}

// FindNotCompletedByKind mocks base method
func (m *MockReports) FindNotCompletedByKind(arg0 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByKind", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByKind indicates an expected call of FindNotCompletedByKind
func (mr *MockReportsMockRecorder) FindNotCompletedByKind(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByKind", reflect.TypeOf((*MockReports)(nil).FindNotCompletedByKind), arg0...)
}

// Last mocks base method
func (m *MockReports) Last() (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockReportsMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockReports)(nil).Last))
}

// Save mocks base method
func (m *MockReports) Save(arg0 *model.Report) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockReportsMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReports)(nil).Save), arg0)
}

// MockSyncables is a mock of Syncables interface
type MockSyncables struct {
	ctrl     *gomock.Controller
	recorder *MockSyncablesMockRecorder
}

// MockSyncablesMockRecorder is the mock recorder for MockSyncables
type MockSyncablesMockRecorder struct {
	mock *MockSyncables
}

// NewMockSyncables creates a new mock instance
func NewMockSyncables(ctrl *gomock.Controller) *MockSyncables {
	mock := &MockSyncables{ctrl: ctrl}
	mock.recorder = &MockSyncablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncables) EXPECT() *MockSyncablesMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncables) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncablesMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncables)(nil).CreateOrUpdate), arg0)
}

// FindByHeight mocks base method
func (m *MockSyncables) FindByHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSyncablesMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSyncables)(nil).FindByHeight), arg0)
}

// FindFirstByDifferentIndexVersion mocks base method
func (m *MockSyncables) FindFirstByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByDifferentIndexVersion indicates an expected call of FindFirstByDifferentIndexVersion
func (mr *MockSyncablesMockRecorder) FindFirstByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByDifferentIndexVersion", reflect.TypeOf((*MockSyncables)(nil).FindFirstByDifferentIndexVersion), arg0)
}

// FindLastInEpoch mocks base method
func (m *MockSyncables) FindLastInEpoch(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastInEpoch", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastInEpoch indicates an expected call of FindLastInEpoch
func (mr *MockSyncablesMockRecorder) FindLastInEpoch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastInEpoch", reflect.TypeOf((*MockSyncables)(nil).FindLastInEpoch), arg0)
}

// FindLastInEpochForHeight mocks base method
func (m *MockSyncables) FindLastInEpochForHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastInEpochForHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastInEpochForHeight indicates an expected call of FindLastInEpochForHeight
func (mr *MockSyncablesMockRecorder) FindLastInEpochForHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastInEpochForHeight", reflect.TypeOf((*MockSyncables)(nil).FindLastInEpochForHeight), arg0)
}

// FindMostRecent mocks base method
func (m *MockSyncables) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSyncablesMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSyncables)(nil).FindMostRecent))
}

// FindMostRecentByDifferentIndexVersion mocks base method
func (m *MockSyncables) FindMostRecentByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByDifferentIndexVersion indicates an expected call of FindMostRecentByDifferentIndexVersion
func (mr *MockSyncablesMockRecorder) FindMostRecentByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByDifferentIndexVersion", reflect.TypeOf((*MockSyncables)(nil).FindMostRecentByDifferentIndexVersion), arg0)
}

// FindSmallestIndexVersion mocks base method
func (m *MockSyncables) FindSmallestIndexVersion() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSmallestIndexVersion")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSmallestIndexVersion indicates an expected call of FindSmallestIndexVersion
func (mr *MockSyncablesMockRecorder) FindSmallestIndexVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSmallestIndexVersion", reflect.TypeOf((*MockSyncables)(nil).FindSmallestIndexVersion))
}

// Save mocks base method
func (m *MockSyncables) Save(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSyncablesMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSyncables)(nil).Save), arg0)
}

// SetProcessedAtForRange mocks base method
func (m *MockSyncables) SetProcessedAtForRange(arg0 types.ID, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProcessedAtForRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProcessedAtForRange indicates an expected call of SetProcessedAtForRange
func (mr *MockSyncablesMockRecorder) SetProcessedAtForRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessedAtForRange", reflect.TypeOf((*MockSyncables)(nil).SetProcessedAtForRange), arg0, arg1, arg2)
}

// MockSystemEvents is a mock of SystemEvents interface
type MockSystemEvents struct {
	ctrl     *gomock.Controller
	recorder *MockSystemEventsMockRecorder
}

// MockSystemEventsMockRecorder is the mock recorder for MockSystemEvents
type MockSystemEventsMockRecorder struct {
	mock *MockSystemEvents
}

// NewMockSystemEvents creates a new mock instance
func NewMockSystemEvents(ctrl *gomock.Controller) *MockSystemEvents {
	mock := &MockSystemEvents{ctrl: ctrl}
	mock.recorder = &MockSystemEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemEvents) EXPECT() *MockSystemEventsMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockSystemEvents) BulkUpsert(arg0 []model.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockSystemEventsMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockSystemEvents)(nil).BulkUpsert), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockSystemEvents) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockSystemEventsMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockSystemEvents)(nil).DeleteOlderThan), arg0)
}

// FindByActor mocks base method
func (m *MockSystemEvents) FindByActor(arg0 string, arg1 store.FindSystemEventByActorQuery) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActor", arg0, arg1)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActor indicates an expected call of FindByActor
func (mr *MockSystemEventsMockRecorder) FindByActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActor", reflect.TypeOf((*MockSystemEvents)(nil).FindByActor), arg0, arg1)
}

// FindByHeight mocks base method
func (m *MockSystemEvents) FindByHeight(arg0 int64) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSystemEventsMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSystemEvents)(nil).FindByHeight), arg0)
}

// FindMostRecent mocks base method
func (m *MockSystemEvents) FindMostRecent() (*model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSystemEventsMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSystemEvents)(nil).FindMostRecent))
}

// FindUnique mocks base method
func (m *MockSystemEvents) FindUnique(arg0 int64, arg1 string, arg2 model.SystemEventKind) (*model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnique", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnique indicates an expected call of FindUnique
func (mr *MockSystemEventsMockRecorder) FindUnique(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnique", reflect.TypeOf((*MockSystemEvents)(nil).FindUnique), arg0, arg1, arg2)
}

// MockValidatorAgg is a mock of ValidatorAgg interface
type MockValidatorAgg struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggMockRecorder
}

// MockValidatorAggMockRecorder is the mock recorder for MockValidatorAgg
type MockValidatorAggMockRecorder struct {
	mock *MockValidatorAgg
}

// NewMockValidatorAgg creates a new mock instance
func NewMockValidatorAgg(ctrl *gomock.Controller) *MockValidatorAgg {
	mock := &MockValidatorAgg{ctrl: ctrl}
	mock.recorder = &MockValidatorAggMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAgg) EXPECT() *MockValidatorAggMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockValidatorAgg) All() ([]model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockValidatorAggMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockValidatorAgg)(nil).All))
}

// Create mocks base method
func (m *MockValidatorAgg) Create(arg0 *model.ValidatorAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorAggMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorAgg)(nil).Create), arg0)
}

// FindBy mocks base method
func (m *MockValidatorAgg) FindBy(arg0 string, arg1 interface{}) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockValidatorAggMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockValidatorAgg)(nil).FindBy), arg0, arg1)
}

// FindByAddress mocks base method
func (m *MockValidatorAgg) FindByAddress(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddress", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddress indicates an expected call of FindByAddress
func (mr *MockValidatorAggMockRecorder) FindByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddress", reflect.TypeOf((*MockValidatorAgg)(nil).FindByAddress), arg0)
}

// FindByID mocks base method
func (m *MockValidatorAgg) FindByID(arg0 int64) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockValidatorAggMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockValidatorAgg)(nil).FindByID), arg0)
}

// GetAllForHeightGreaterThan mocks base method
func (m *MockValidatorAgg) GetAllForHeightGreaterThan(arg0 int64) ([]model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForHeightGreaterThan", arg0)
	ret0, _ := ret[0].([]model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForHeightGreaterThan indicates an expected call of GetAllForHeightGreaterThan
func (mr *MockValidatorAggMockRecorder) GetAllForHeightGreaterThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForHeightGreaterThan", reflect.TypeOf((*MockValidatorAgg)(nil).GetAllForHeightGreaterThan), arg0)
}

// Save mocks base method
func (m *MockValidatorAgg) Save(arg0 *model.ValidatorAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorAggMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorAgg)(nil).Save), arg0)
}

// MockValidatorSeq is a mock of ValidatorSeq interface
type MockValidatorSeq struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqMockRecorder
}

// MockValidatorSeqMockRecorder is the mock recorder for MockValidatorSeq
type MockValidatorSeqMockRecorder struct {
	mock *MockValidatorSeq
}

// NewMockValidatorSeq creates a new mock instance
func NewMockValidatorSeq(ctrl *gomock.Controller) *MockValidatorSeq {
	mock := &MockValidatorSeq{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeq) EXPECT() *MockValidatorSeqMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockValidatorSeq) BulkUpsert(arg0 []model.ValidatorSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockValidatorSeqMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockValidatorSeq)(nil).BulkUpsert), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockValidatorSeq) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorSeqMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorSeq)(nil).DeleteOlderThan), arg0)
}

// FindByHeight mocks base method
func (m *MockValidatorSeq) FindByHeight(arg0 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockValidatorSeqMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockValidatorSeq)(nil).FindByHeight), arg0)
}

// FindByHeightAndAddress mocks base method
func (m *MockValidatorSeq) FindByHeightAndAddress(arg0 int64, arg1 string) (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndAddress", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndAddress indicates an expected call of FindByHeightAndAddress
func (mr *MockValidatorSeqMockRecorder) FindByHeightAndAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndAddress", reflect.TypeOf((*MockValidatorSeq)(nil).FindByHeightAndAddress), arg0, arg1)
}

// FindLastByAddress mocks base method
func (m *MockValidatorSeq) FindLastByAddress(arg0 string, arg1 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByAddress indicates an expected call of FindLastByAddress
func (mr *MockValidatorSeqMockRecorder) FindLastByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddress", reflect.TypeOf((*MockValidatorSeq)(nil).FindLastByAddress), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockValidatorSeq) FindMostRecent() (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorSeqMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorSeq)(nil).FindMostRecent))
}

// Summarize mocks base method
func (m *MockValidatorSeq) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]store.ValidatorSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockValidatorSeqMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockValidatorSeq)(nil).Summarize), arg0, arg1)
}

// MockValidatorSummary is a mock of ValidatorSummary interface
type MockValidatorSummary struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSummaryMockRecorder
}

// MockValidatorSummaryMockRecorder is the mock recorder for MockValidatorSummary
type MockValidatorSummaryMockRecorder struct {
	mock *MockValidatorSummary
}

// NewMockValidatorSummary creates a new mock instance
func NewMockValidatorSummary(ctrl *gomock.Controller) *MockValidatorSummary {
	mock := &MockValidatorSummary{ctrl: ctrl}
	mock.recorder = &MockValidatorSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSummary) EXPECT() *MockValidatorSummaryMockRecorder {
	return m.recorder
}

// DeleteOlderThan mocks base method
func (m *MockValidatorSummary) DeleteOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorSummaryMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorSummary)(nil).DeleteOlderThan), arg0, arg1)
}

// Find mocks base method
func (m *MockValidatorSummary) Find(arg0 *model.ValidatorSummary) (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockValidatorSummaryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockValidatorSummary)(nil).Find), arg0)
}

// FindActivityPeriods mocks base method
func (m *MockValidatorSummary) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockValidatorSummaryMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockValidatorSummary)(nil).FindActivityPeriods), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockValidatorSummary) FindMostRecent() (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorSummaryMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorSummary)(nil).FindMostRecent))
}

// FindMostRecentByInterval mocks base method
func (m *MockValidatorSummary) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockValidatorSummaryMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockValidatorSummary)(nil).FindMostRecentByInterval), arg0)
}

// FindSummary mocks base method
func (m *MockValidatorSummary) FindSummary(arg0 types.SummaryInterval, arg1 string) ([]store.ValidatorSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockValidatorSummaryMockRecorder) FindSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockValidatorSummary)(nil).FindSummary), arg0, arg1)
}

// FindSummaryByAddress mocks base method
func (m *MockValidatorSummary) FindSummaryByAddress(arg0 string, arg1 types.SummaryInterval, arg2 string) ([]model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummaryByAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummaryByAddress indicates an expected call of FindSummaryByAddress
func (mr *MockValidatorSummaryMockRecorder) FindSummaryByAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummaryByAddress", reflect.TypeOf((*MockValidatorSummary)(nil).FindSummaryByAddress), arg0, arg1, arg2)
}

// MockValidatorGroupAgg is a mock of ValidatorGroupAgg interface
type MockValidatorGroupAgg struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorGroupAggMockRecorder
}

// MockValidatorGroupAggMockRecorder is the mock recorder for MockValidatorGroupAgg
type MockValidatorGroupAggMockRecorder struct {
	mock *MockValidatorGroupAgg
}

// NewMockValidatorGroupAgg creates a new mock instance
func NewMockValidatorGroupAgg(ctrl *gomock.Controller) *MockValidatorGroupAgg {
	mock := &MockValidatorGroupAgg{ctrl: ctrl}
	mock.recorder = &MockValidatorGroupAggMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorGroupAgg) EXPECT() *MockValidatorGroupAggMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockValidatorGroupAgg) All() ([]model.ValidatorGroupAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]model.ValidatorGroupAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockValidatorGroupAggMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockValidatorGroupAgg)(nil).All))
}

// Create mocks base method
func (m *MockValidatorGroupAgg) Create(arg0 *model.ValidatorGroupAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorGroupAggMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorGroupAgg)(nil).Create), arg0)
}

// CreateOrUpdate mocks base method
func (m *MockValidatorGroupAgg) CreateOrUpdate(arg0 *model.ValidatorGroupAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockValidatorGroupAggMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockValidatorGroupAgg)(nil).CreateOrUpdate), arg0)
}

// FindBy mocks base method
func (m *MockValidatorGroupAgg) FindBy(arg0 string, arg1 interface{}) (*model.ValidatorGroupAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorGroupAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockValidatorGroupAggMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockValidatorGroupAgg)(nil).FindBy), arg0, arg1)
}

// FindByAddress mocks base method
func (m *MockValidatorGroupAgg) FindByAddress(arg0 string) (*model.ValidatorGroupAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddress", arg0)
	ret0, _ := ret[0].(*model.ValidatorGroupAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddress indicates an expected call of FindByAddress
func (mr *MockValidatorGroupAggMockRecorder) FindByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddress", reflect.TypeOf((*MockValidatorGroupAgg)(nil).FindByAddress), arg0)
}

// FindByID mocks base method
func (m *MockValidatorGroupAgg) FindByID(arg0 int64) (*model.ValidatorGroupAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*model.ValidatorGroupAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockValidatorGroupAggMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockValidatorGroupAgg)(nil).FindByID), arg0)
}

// Save mocks base method
func (m *MockValidatorGroupAgg) Save(arg0 *model.ValidatorGroupAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorGroupAggMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorGroupAgg)(nil).Save), arg0)
}

// MockValidatorGroupSeq is a mock of ValidatorGroupSeq interface
type MockValidatorGroupSeq struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorGroupSeqMockRecorder
}

// MockValidatorGroupSeqMockRecorder is the mock recorder for MockValidatorGroupSeq
type MockValidatorGroupSeqMockRecorder struct {
	mock *MockValidatorGroupSeq
}

// NewMockValidatorGroupSeq creates a new mock instance
func NewMockValidatorGroupSeq(ctrl *gomock.Controller) *MockValidatorGroupSeq {
	mock := &MockValidatorGroupSeq{ctrl: ctrl}
	mock.recorder = &MockValidatorGroupSeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorGroupSeq) EXPECT() *MockValidatorGroupSeqMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method
func (m *MockValidatorGroupSeq) BulkUpsert(arg0 []model.ValidatorGroupSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert
func (mr *MockValidatorGroupSeqMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockValidatorGroupSeq)(nil).BulkUpsert), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockValidatorGroupSeq) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorGroupSeqMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorGroupSeq)(nil).DeleteOlderThan), arg0)
}

// FindByHeight mocks base method
func (m *MockValidatorGroupSeq) FindByHeight(arg0 int64) ([]model.ValidatorGroupSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorGroupSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockValidatorGroupSeqMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockValidatorGroupSeq)(nil).FindByHeight), arg0)
}

// FindByHeightAndAddress mocks base method
func (m *MockValidatorGroupSeq) FindByHeightAndAddress(arg0 int64, arg1 string) (*model.ValidatorGroupSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndAddress", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorGroupSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndAddress indicates an expected call of FindByHeightAndAddress
func (mr *MockValidatorGroupSeqMockRecorder) FindByHeightAndAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndAddress", reflect.TypeOf((*MockValidatorGroupSeq)(nil).FindByHeightAndAddress), arg0, arg1)
}

// FindLastByAddress mocks base method
func (m *MockValidatorGroupSeq) FindLastByAddress(arg0 string, arg1 int64) ([]model.ValidatorGroupSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorGroupSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByAddress indicates an expected call of FindLastByAddress
func (mr *MockValidatorGroupSeqMockRecorder) FindLastByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddress", reflect.TypeOf((*MockValidatorGroupSeq)(nil).FindLastByAddress), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockValidatorGroupSeq) FindMostRecent() (*model.ValidatorGroupSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorGroupSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorGroupSeqMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorGroupSeq)(nil).FindMostRecent))
}

// Summarize mocks base method
func (m *MockValidatorGroupSeq) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]store.ValidatorGroupSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorGroupSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockValidatorGroupSeqMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockValidatorGroupSeq)(nil).Summarize), arg0, arg1)
}

// MockValidatorGroupSummary is a mock of ValidatorGroupSummary interface
type MockValidatorGroupSummary struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorGroupSummaryMockRecorder
}

// MockValidatorGroupSummaryMockRecorder is the mock recorder for MockValidatorGroupSummary
type MockValidatorGroupSummaryMockRecorder struct {
	mock *MockValidatorGroupSummary
}

// NewMockValidatorGroupSummary creates a new mock instance
func NewMockValidatorGroupSummary(ctrl *gomock.Controller) *MockValidatorGroupSummary {
	mock := &MockValidatorGroupSummary{ctrl: ctrl}
	mock.recorder = &MockValidatorGroupSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorGroupSummary) EXPECT() *MockValidatorGroupSummaryMockRecorder {
	return m.recorder
}

// DeleteOlderThan mocks base method
func (m *MockValidatorGroupSummary) DeleteOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorGroupSummaryMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorGroupSummary)(nil).DeleteOlderThan), arg0, arg1)
}

// Find mocks base method
func (m *MockValidatorGroupSummary) Find(arg0 *model.ValidatorGroupSummary) (*model.ValidatorGroupSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.ValidatorGroupSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockValidatorGroupSummaryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockValidatorGroupSummary)(nil).Find), arg0)
}

// FindActivityPeriods mocks base method
func (m *MockValidatorGroupSummary) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockValidatorGroupSummaryMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockValidatorGroupSummary)(nil).FindActivityPeriods), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockValidatorGroupSummary) FindMostRecent() (*model.ValidatorGroupSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorGroupSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorGroupSummaryMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorGroupSummary)(nil).FindMostRecent))
}

// FindMostRecentByInterval mocks base method
func (m *MockValidatorGroupSummary) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.ValidatorGroupSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.ValidatorGroupSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockValidatorGroupSummaryMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockValidatorGroupSummary)(nil).FindMostRecentByInterval), arg0)
}

// FindSummary mocks base method
func (m *MockValidatorGroupSummary) FindSummary(arg0 types.SummaryInterval, arg1 string) ([]store.ValidatorGroupSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorGroupSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockValidatorGroupSummaryMockRecorder) FindSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockValidatorGroupSummary)(nil).FindSummary), arg0, arg1)
}

// FindSummaryByAddress mocks base method
func (m *MockValidatorGroupSummary) FindSummaryByAddress(arg0 string, arg1 types.SummaryInterval, arg2 string) ([]model.ValidatorGroupSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummaryByAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.ValidatorGroupSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummaryByAddress indicates an expected call of FindSummaryByAddress
func (mr *MockValidatorGroupSummaryMockRecorder) FindSummaryByAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummaryByAddress", reflect.TypeOf((*MockValidatorGroupSummary)(nil).FindSummaryByAddress), arg0, arg1, arg2)
}
